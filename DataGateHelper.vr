Using System
Using System.Text
Using ASNA.DataGate.Client
Using ASNA.DataGate.Common
Using ASNA.DataGate.Providers

BegClass DataGateHelper
    DclFld DGDB     Type(AdgConnection) 
    DclFld DGFile   Type(FileAdapter)     
    DclFld DGDS     Type(AdgDataSet) 

    // Open file for read-only use.        
    BegSr OpenForRead Access(*Public) 
        DclSrParm DBName Type(*String) 
        DclSrParm Library Type(*String) 
        DclSrParm File Type(*String)

        // Instance DB connection.
        DGDB = *New AdgConnection(DBName) 
        // Instance file object.
        DGFile = *New FileAdapter(DGDB, String.Format('{0}/{1}', Library, File))
        // Set read-only with optimal record blocking.
        DGFile.AccessMode = AccessMode.Read
        DGFile.OpenAttributes.BlockingFactor = FileOpenAttr.OptimalBlockingFactor
        // Open a new AdgDataSet. 
        DGFile.OpenNewAdgDataSet(*ByRef DGDS)
    EndSr

    // Read entire file.
    BegSr ReadEntireFile Access(*Public) 
        DclSrParm DBName Type(*String) 
        DclSrParm Library Type(*String) 
        DclSrParm File Type(*String)
        DclSrParm FieldNames Type(*String) Rank(1)

        // Open the DataGate file.
        OpenForRead(DBName, Library, File) 

        // Read all records. 
        DoWhile ReadNextRecord()
            // For each field name provided, show the field value.
            ForEach FieldName Type(*String) Collection(FieldNames) 
                Console.WriteLine(DGDS.ActiveRow[FieldName])
            EndFor 
        EndDO 

        // Close file.
        DGFile.Close() 
        // Close DB connection.
        DGDB.Close()   
    EndSr

    // Read next available record. 
    // Return *True if record read; otherwise return *False.
    BegFunc ReadNextRecord Type(*Boolean)        
        // ReadSequential doesn't know about EOF--it throws a DataGate
        // exception when there are no more records to read. 
        // This function puts an EOF-friendly wrapper around ReadSequential.

        // Don't accumulate rows in the DataSet.
        DGDS.Tables[0].Clear() 
        Try
            DGFile.ReadSequential(DGDS, ReadSequentialMode.Next, LockRequest.Read)
            LeaveSr *True
        Catch DgEx Type(dgException) 
            // If EOF, swallow exception and return *False, 
            // which indicates EOF has been reached.
            If (DgEx.Error = dgErrorNumber.dgEaEOF)
                LeaveSr *False 
            Else
                // Otherwise rethrow error exception. 
                Throw DgEx           
            EndIf
        EndTry    
    EndFunc 
EndClass
